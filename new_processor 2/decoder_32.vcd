$date
	Mon Sep 14 11:51:05 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module decoder_32_tb $end
$var wire 5 ! select [4:0] $end
$var wire 32 " out [31:0] $end
$var wire 1 # enable $end
$var integer 32 $ i [31:0] $end
$scope module adder $end
$var wire 1 # enable $end
$var wire 5 % select [4:0] $end
$var wire 32 & out [31:0] $end
$var wire 32 ' enable_pin [31:0] $end
$scope module shift_left $end
$var wire 32 ( A [31:0] $end
$var wire 5 ) shamt [4:0] $end
$var wire 32 * shift_8 [31:0] $end
$var wire 32 + shift_4 [31:0] $end
$var wire 32 , shift_2 [31:0] $end
$var wire 32 - shift_16 [31:0] $end
$var wire 32 . shift_1 [31:0] $end
$var wire 32 / mux_out_8 [31:0] $end
$var wire 32 0 mux_out_4 [31:0] $end
$var wire 32 1 mux_out_2 [31:0] $end
$var wire 32 2 mux_out_16 [31:0] $end
$var wire 32 3 S [31:0] $end
$scope module do_we_shift_by_1 $end
$var wire 1 4 select $end
$var wire 32 5 out [31:0] $end
$var wire 32 6 in1 [31:0] $end
$var wire 32 7 in0 [31:0] $end
$upscope $end
$scope module do_we_shift_by_16 $end
$var wire 32 8 in0 [31:0] $end
$var wire 1 9 select $end
$var wire 32 : out [31:0] $end
$var wire 32 ; in1 [31:0] $end
$upscope $end
$scope module do_we_shift_by_2 $end
$var wire 1 < select $end
$var wire 32 = out [31:0] $end
$var wire 32 > in1 [31:0] $end
$var wire 32 ? in0 [31:0] $end
$upscope $end
$scope module do_we_shift_by_4 $end
$var wire 1 @ select $end
$var wire 32 A out [31:0] $end
$var wire 32 B in1 [31:0] $end
$var wire 32 C in0 [31:0] $end
$upscope $end
$scope module do_we_shift_by_8 $end
$var wire 32 D in0 [31:0] $end
$var wire 1 E select $end
$var wire 32 F out [31:0] $end
$var wire 32 G in1 [31:0] $end
$upscope $end
$scope module shift_by_1 $end
$var wire 32 H A [31:0] $end
$var wire 32 I shift_1 [31:0] $end
$upscope $end
$scope module shift_by_16 $end
$var wire 32 J A [31:0] $end
$var wire 32 K shift_16 [31:0] $end
$upscope $end
$scope module shift_by_2 $end
$var wire 32 L A [31:0] $end
$var wire 32 M shift_2 [31:0] $end
$upscope $end
$scope module shift_by_4 $end
$var wire 32 N A [31:0] $end
$var wire 32 O shift_4 [31:0] $end
$upscope $end
$scope module shift_by_8 $end
$var wire 32 P A [31:0] $end
$var wire 32 Q shift_8 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module my_tri_tb $end
$var wire 32 R out [31:0] $end
$var wire 1 S oe $end
$var wire 32 T in [31:0] $end
$var integer 32 U i [31:0] $end
$scope module adder $end
$var wire 32 V in [31:0] $end
$var wire 1 S oe $end
$var wire 32 W out [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110 W
b110 V
b110 U
b110 T
1S
b110 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
0E
b0 D
b0 C
b0 B
b0 A
1@
b0 ?
b0 >
b0 =
1<
b0 ;
b0 :
09
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b110 )
b0 (
b0 '
b0 &
b110 %
b110 $
0#
b0 "
b110 !
$end
